def nexusUsername = System.getenv("NEXUS_USERNAME") ?: (project.findProperty("NEXUS_USERNAME") ?: "")
def nexusPassword = System.getenv("NEXUS_PASSWORD") ?: (project.findProperty("NEXUS_PASSWORD") ?: "")

nexusPublishing {
    repositories {
        sonatype {
            username = nexusUsername
            password = nexusPassword
        }
    }
}

def pomDefinition = {
    name = 'Mongration'
    description = 'MongoDB data migration tool for Spring Boot projects'
    url = 'https://github.com/KuliginStepan/mongration'
    developers {
        developer {
            id = 'kuliginstepan'
            name = 'Stepan Kuligin'
            email = 'kuligin_stepan@mail.ru'
        }
    }
    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    scm {
        connection = 'scm:git:git://github.com/KuliginStepan/mongration.git'
        developerConnection = 'scm:git:ssh://github.com/KuliginStepan/mongration.git'
        url = 'https://github.com/KuliginStepan/mongration'
    }
}

publishing {
    publications {
        snapshot(MavenPublication) {
            artifactId = project.name
            afterEvaluate {
                version project.version + '-SNAPSHOT'
            }
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom(pomDefinition)
        }
        release(MavenPublication) {
            artifactId = project.name
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom(pomDefinition)
        }
    }
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.release
}
